matrix_divided(matrix, div)
=====================

Using matrix_divided()
---------------------

matrix_divided is a function that divides all elements of a matrix by div
A new matrix is returned with the results which have been rounded to two decimal
places. The function accepts int/float values. Errors will occur if other values
are passed. If div is 0 a ZeroDivisionError will be raised.

Tests

======

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

::

	>>> matrix = [[2, 4, 6, 8], [10, 12, 14, 16]]
	>>> print(matrix_divided(matrix, 2))
	[[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0]]

::

	>>> matrix = []
	>>> print(matrix_divided(matrix, 1))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::

	>>> matrix = "Nope"
	>>> print(matrix_divided(matrix, 1))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::

	>>> matrix = [[1, 1, 1,], [1, 1]]
	>>> print(matrix_divided(matrix, 1))
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

::

	>>> matrix = [[1, 1], [1, 1]]
	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

::

	>>> matrix = [[-0.5, -1, 1], [0, 3.555, 500]]
	>>> print(matrix_divided(matrix, 1))
	[[-0.5, -1.0, 1.0], [0.0, 3.56, 500.0]]

::

	>>> matrix = [[1], [1]]
	>>> print(matrix_divided(matrix))
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

::

	>>> matrix = [[1], [1]]
	>>> print(matrix_divided())
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

::

	>>> matrix = [[1], [1]]
	>>> print(matrix_divided(matrix, float('inf')))
	[[0.0], [0.0]]

::

	>>> matrix = [[1], [1]]
	>>> print(matrix_divided(matrix, "nope"))
	Traceback (most recent call last):
	TypeError: div must be a number
